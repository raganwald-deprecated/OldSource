/** * Copyright (c) 1996, 1997 Codestorm Inc. All rights reserved. * * @author Reginald Braithwaite-Lee ***/package COM.codestorm.mendel;import java.io.*;import java.util.Enumeration;public interface AbstractMember extends AbstractThunk, AbstractPublishSubject {String keyName = "NAME"; // standard key for namesString keyExtends = "EXTENDS";String keyComments = "COMMENTS";String keyInPath = "INPATH";AbstractMember shallowCopy () throws MendelException;/** * @(#) AbstractMember#getProperty(String key) * @param key String the name of the property * @return String the value of the property * @exception MendelException::NoMemberException::NoPropertyException * @see AbstractMemberContainer#putProperty**/String getProperty (String key) throws MendelException;/** * @(#) AbstractMember#getProperty(String key, String defaultValue) * @param key String the name of the property * @param defaultValue String the value to answer if the property is missing * @return String the value of the property * @see AbstractMember#putProperty**/String getProperty (String key, String defaultValue) throws MendelException;/** * @(#) propertyKeys() * @return Enumeration all of the keys * @see AbstractMember#getProperty**/Enumeration propertyKeys () throws MendelException;/** * @(#) AbstractMember#putProperty(String key, String value) * @param key String the name of the property * @return void * @exception MendelException::NoMemberException::NoPropertyException * @see AbstractMemberContainer#getProperty**/void putProperty (String key, String value) throws MendelException;/** * @(#) AbstractMember#getContainer() * @exception MendelException::NoMemberException::NoContainerException * @see AbstractMemberContainer#setStaticScope**/AbstractMemberContainer getStaticScope (MissingMember miss) throws MendelException;void setStaticScope (AbstractMemberContainer m) throws MendelException;void setParent (AbstractMemberContainer m) throws MendelException;AbstractMemberContainer getParent (MissingMember miss) throws MendelException;/** * * The contract with yourself is that: * a) it is *thorough*. x.yourself() == x.yourself().yourself() for any x. * b) x.yourself() always answers an object with significant type. * * @see decorates for contrast ***/AbstractMember yourself () throws MendelException;/** * * A human-readable description of the object, often resembling MendelLISP * * @see toString * @see asText ***/String debugString ();boolean isEmpty () throws MendelException;/** * * The HTML Representation of the object. Not usually taken directly-- * the corerct action is to make an HTMLString out of the object. * * @see + * @see HTMLString * @see StringMember * @see AsbtractTextMember ***/AbstractTextMember asText () throws MendelException;/** * * @return AbstractPublishStrategy a strategy for publishing this member. ***/AbstractPublishStrategy getPublishStrategy () throws MendelException;void putPublishStrategy (AbstractPublishStrategy aPublishStrategy) throws MendelException;}