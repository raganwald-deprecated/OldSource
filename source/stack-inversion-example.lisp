(let* (	(stack-maker (lambda ()		(letrec (			(stack nil)			(pop-function (lambda ()				(if (null? stack)					nil					(let (						(ret (car stack)))						(set! stack (cdr stack))						ret))))			(push-function (lambda (val)				(set! stack (cons val stack)))))			(set! (@inversion pop-function) push-function)			pop-function)))	(stack-one (stack-maker))	(stack-two (stack-maker)))	(set! (stack-one) 'one-one)	(set! (stack-one) 'one-two)	(set! (stack-two) 'two-one)	(set! (stack-two) 'two-two)	(stack-one)	(stack-one))