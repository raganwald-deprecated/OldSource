(begin	(define-macro	(freeze expr)					Ô(lambda () ,expr))	(define-macro	(thaw expr)					Ô(,expr))	(define-macro	(stream-cons theCar theCdr)					Ô(cons ,theCar (freeze ,theCdr)))	(define-macro	(stream-car aStream)					Ô(car ,aStream))	(define-macro	(stream-cdr aStream)					Ô(thaw (cdr ,aStream)))	(define			whole-number-stream					(letrec						((stream-from (lambda (n) (stream-cons n (stream-from (+ n 1))))))					(stream-from 0)))	(define			factorial-stream					(letrec						((stream-times (lambda (n tot) (stream-cons tot (stream-times (* (+ n 1) tot))))))					(stream-times 1 1)))	(stream-car		(stream-cdr		(stream-cdr		(stream-cdr		(stream-cdr		(stream-cdr		(stream-cdr		(stream-cdr whole-number-stream)))))))))						